https://www.geeksforgeeks.org/cutting-a-rod-dp-13/
// A recursive solution for Rod cutting problem
#include <bits/stdc++.h>
#include <iostream>
#include <math.h>
using namespace std;

// A utility function to get the maximum of two integers
int max(int a, int b) { return (a > b) ? a : b; }

/* Returns the best obtainable price for a rod of length n
and price[] as prices of different pieces */
int cutRod(int price[], int index, int n)
{
	// base case
	if (index == 0) {
		return n * price[0];
	}
	//At any index we have 2 options either
	//cut the rod of this length or not cut
	//it
	int notCut = cutRod(price,index - 1,n);
	int cut = INT_MIN;
	int rod_length = index + 1;

	if (rod_length <= n)
		cut = price[index]
			+ cutRod(price,index,n - rod_length);

	return max(notCut, cut);
}

/* Driver program to test above functions */
int main()
{
	int arr[] = { 1, 5, 8, 9, 10, 17, 17, 20 };
	int size = sizeof(arr) / sizeof(arr[0]);
	cout << "Maximum Obtainable Value is "
		<< cutRod(arr, size - 1, size);
	getchar();
	return 0;
}

//This code is contributed by Sanskar







#include <bits/stdc++.h>
using namespace std;
#define MAX(x, y) (((x) > (y)) ? (x) : (y))

const int INF = 100000;

int bottom_up_rod_cutting(int c[], int n) {
  int r[n+1];
  r[0] = 0;
  int i,j;

  for(j=1; j<=n; j++) {
    int maximum_revenue = -1*INF;
    for(i=1; i<=j; i++) {
      maximum_revenue = MAX(maximum_revenue, c[i] + r[j-i]);
    }
    r[j] = maximum_revenue;
  }
  return r[n];
}

int main() {
    int n;
    cin>>n;
    int a[n+1];
    for(int i=0;i<=n;i++)
    cin>>a[i];
  // array starting from 1, element at index 0 is fake

  printf("%d\n", bottom_up_rod_cutting(a, n));
  return 0;
}
//This code is contributed by Sanskar


