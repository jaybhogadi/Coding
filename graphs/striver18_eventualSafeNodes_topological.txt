  vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        //   int vis[V]={0};
        // int pathvisit[V]={0};
        // vector<int> ans;
        //     for(int i=0;i<V;i++)
        //     {
                
                
        //             if(dfscheck(i,vis,pathvisit,adj)==false)
        //               ans.push_back(i);
                
        //     }
        //   sort(ans.begin(),ans.end());
        //   return ans;
        vector<int> revadj[V];
        int inde[V]={0};
        for(int i=0;i<V;i++)
        {
            for(auto it:adj[i])
            {
                revadj[it].push_back(i);
                inde[i]++;
            }
        }
        queue<int> q;
         for(int i=0;i<V;i++)
         {
             if(inde[i]==0)
              q.push(i);
         }
         vector<int> topo;
         while(!q.empty())
         {
             int a=q.front();
             q.pop();
             topo.push_back(a);
             for(auto i:revadj[a])
             {
                 inde[i]--;
                 if(inde[i]==0)
                    q.push(i);
             }
             
         }
        sort(topo.begin(),topo.end());
        return topo;
        // code here
    }