https://practice.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=direct-acyclic-graph  
 private:
    void topo(int i,int N, vector<pair<int,int>> adj[],stack<int> &st,vector<int> &vis)
    {
        vis[i]=1;
        for(auto j:adj[i])
        {
             int k=j.first;
            if(!vis[k])
             topo(k,N,adj,st,vis);
        }
        st.push(i);
    }
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        vector<pair<int,int>> adj[N];
        vector<int> vis(N,0);
        for(int i=0;i<M;i++)
        {
            int a=edges[i][0];
            int b=edges[i][1];
            int c=edges[i][2];
            
            adj[a].push_back({b,c});
        }
        stack<int> st;
       
        for(int i=0;i<N;i++)
        {
            if(!vis[i])
              topo(i,N,adj,st,vis);
        }
        vector<int> dist(N,1e9);
        dist[0]=0;
        vector<int> ans;
        while(!st.empty())
        {
            int a=st.top();
            st.pop();
           for(auto it:adj[a])
           {
               int u=it.first;
               int v=it.second;
               if(dist[a]+v<dist[u])
               {
                   dist[u]=dist[a]+v;
               }
           }
        }
        for(int i=0;i<N;i++)
        {
            if(dist[i]==1e9)
              dist[i]=-1;
        }
        return dist;
    }