https://practice.geeksforgeeks.org/problems/shortest-path-in-weighted-undirected-graph/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=shortest-path-in-weighted-undirected-graph

 vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        // Code here
        vector<int> dist(n+1,1e9);
        vector<int> parent(n+1);
        for(int i=0;i<n;i++) parent[i]=i;
        vector<pair<int,int>> adj[n+1];
        for(auto it:edges)
        {
          int a=it[0];
          int b=it[1];
          int wt=it[2];
          
          adj[a].push_back({b,wt});
          adj[b].push_back({a,wt});
        }
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        pq.push({0,1});
        parent[1]=1;
        dist[1]=0;
        
        while(!pq.empty())
        {
            auto it=pq.top();
            int weight=it.first;
            int nod=it.second;
            pq.pop();
            
            for(auto itt:adj[nod])
            {
                int nod2=itt.first;
                int weigh=itt.second;
                
                if(weight+weigh<dist[nod2])
                {
                    dist[nod2]=weight+weigh;
                    pq.push({dist[nod2],nod2});
                    parent[nod2]=nod;
                }
            }
        }
        
       
        vector<int> ans;
        if(dist[n]==1e9) return {-1};
       while(parent[n]!=n)
       {
           ans.push_back(n);
           n=parent[n];
       }
       ans.push_back(1);
       reverse(ans.begin(),ans.end());
       return ans;
      
    }