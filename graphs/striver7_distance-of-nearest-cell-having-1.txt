
https://practice.geeksforgeeks.org/problems/distance-of-nearest-cell-having-1-1587115620/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=distance-of-nearest-cell-having-1
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{   vector<vector<int>> ans=grid;
	    queue<pair<pair<int,int>,int>> q;
	    int n=grid.size();
	    int m=grid[0].size();
	    int vis[n][m];
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<m;j++)
	        {
	            if(grid[i][j]==1)
	            {
	                q.push({{i,j},0});
	                ans[i][j]=0;
	                vis[i][j]=1;
	            }else
	             vis[i][j]=0;
	        }
	    }
	    
	    while(!q.empty())
	    {
	        int u=q.front().first.first;
	        int v=q.front().first.second;
	        int y=q.front().second;
	        q.pop();
	        int nr[]={-1,0,+1,0};
	        int nc[]={0,+1,0,-1};
	        for(int i=0;i<4;i++)
	        {
	            int nrow=u+nr[i];
	            int ncol=v+nc[i];
	            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && vis[nrow][ncol]==0)
	            {
	                vis[nrow][ncol]=1;
	                q.push({{nrow,ncol},y+1});
	                ans[nrow][ncol]=y+1;
	            }
	        }
	    }
	    return ans;
	    
	    // Code here
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>grid(n, vector<int>(m, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		vector<vector<int>> ans = obj.nearest(grid);
		for(auto i: ans){
			for(auto j: i){
				cout << j << " ";
			}
			cout << "\n";
		}
	}
	return 0;
}
// } Driver Code Ends