/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

https://leetcode.com/problems/intersection-of-two-linked-lists/submissions/

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int l1=0,l2=0;
        ListNode* temp1=headA;
        ListNode* temp2=headB;
        while(headA || headB )
        {
            if(headA!=NULL)
            {
                l1++;
                headA=headA->next;
            }
            if(headB!=NULL)
            {
                l2++;
                headB=headB->next;
            }
                
        }
        int c=0,flag=0;
        if(l1>l2)
        {
            c=l1-l2;
        }else
        {
            c=l2-l1;
            flag=1;
        }
        ListNode* u=NULL;
        if(flag==1){
        u=temp2;
            temp1=temp1;
        }
        else{
         u=temp1;
            temp1=temp2;
        }
        while(c!=0)
        {
            u=u->next;
            c--;
        }
        while(temp1!=u)
        {
            temp1=temp1->next;
            u=u->next;
        }
        return temp1;
    }
};


 ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
       if(headA==NULL || headB==NULL)
           return NULL;
        ListNode* temp1=headA;
        ListNode* temp2=headB;
        while(temp1!=temp2)
        {
            temp1=(temp1==NULL)?headB:temp1->next;
            temp2=(temp2==NULL)?headA:temp2->next;
        }
        return temp1;
    }