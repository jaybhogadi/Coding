/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}*     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

https://leetcode.com/problems/palindrome-linked-list/submissions/

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL)
             return true;
        ListNode* slow=head;
        ListNode* fast=head;
        ListNode* v=head;
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        slow->next=reverse(slow->next);
        ListNode* u=slow->next;
        while(u!=NULL)
        {
            if(u->val!=v->val)
                return false;
            u=u->next;
        v=v->next;
        }
        return true;
//      
    
    }
    ListNode* reverse(ListNode* temp)
{
        ListNode* prev=NULL;
        ListNode* nex=NULL;
        while(temp!=NULL)
        {
            nex=temp->next;
            temp->next=prev;
            prev=temp;
            temp=nex;
            
        }
        return prev;
   }
};