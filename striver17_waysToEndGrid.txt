https://leetcode.com/problems/unique-paths/submissions/

class Solution {
public:
    int f(int i,int j,int m,int n,vector<vector<int>> &dp)
    {
        if(i==m && j==n)
             return 1;
        if(i>m || j>n)
            return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        else
         return dp[i][j]=f(i+1,j,m,n,dp)+f(i,j+1,m,n,dp);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m,vector<int>(n,-1));
       return f(0,0,m-1,n-1,dp);
    }
};





class Solution {
public:
    // int f(int i,int j,int m,int n,vector<vector<int>> &dp)
    // {
    //     if(i==m && j==n)
    //          return 1;
    //     if(i>m || j>n)
    //         return 0;
    //     if(dp[i][j]!=-1) return dp[i][j];
    //     else
    //      return dp[i][j]=f(i+1,j,m,n,dp)+f(i,j+1,m,n,dp);
    // }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m,vector<int>(n,0));
        dp[0][0]=1;
       for(int i=0;i<m;i++)
       {
           for(int j=0;j<n;j++)
           {
               if(j>0)
               dp[i][j]+=dp[i][j-1];
               if(i>0)
                   dp[i][j]+=dp[i-1][j];
               cout<<dp[i][j]<<" ";
                   
           }cout<<endl;
       }
        return dp[m-1][n-1];
    }
};



//NCRclass Solution {
public:
    // int f(int i,int j,int m,int n,vector<vector<int>> &dp)
    // {
    //     if(i==m && j==n)
    //          return 1;
    //     if(i>m || j>n)
    //         return 0;
    //     if(dp[i][j]!=-1) return dp[i][j];
    //     else
    //      return dp[i][j]=f(i+1,j,m,n,dp)+f(i,j+1,m,n,dp);
    // }
    int uniquePaths(int m, int n) {
        //no of steps should take is (m-1)+(n-1);
        int k=m+n-2;
        //out of this (n-1) should R i.e moving to next columns
        //and m-1 should D i.e moving down
        //selecting (n-1) from (m+n-2) i.e (m+n-2)C(n-1)
        double res=1;
        for(int i=1;i<=(m-1);i++)
        {
            res=res*(k-(m-1)+i)/i;
            cout<<res<<" ";
        }
        
        return (int)res;
        
    }
};


